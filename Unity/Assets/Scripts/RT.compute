// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Output;
float2 res; //resolution
int samples;
int max_bounces;

float Time;
uint seed = 1;

float rand()
{
	seed = seed * 747796405 + 2891336453;
	uint result = ((seed >> ((seed >> 28) + 4)) ^ seed) * 27780737;
	result = (result >> 22) ^ result;
	return result / 4294967295.;
};
float3 cosWeightedRandomHemisphereDirection(float3 n)
{
    float2 r = float2(rand(), rand());
    float3 uu = normalize(cross(n, abs(n.y) > .5 ? float3(1., 0., 0.) : float3(0., 1., 0.)));
    float3 vv = cross(uu, n);
    float ra = sqrt(r.y);
    float rx = ra * cos(6.28318530718 * r.x);
    float ry = ra * sin(6.28318530718 * r.x);
    float rz = sqrt(1. - r.y);
    float3 rr = float3(rx * uu + ry * vv + rz * n);
    return normalize(rr);
}
float3 normalize(float3 v)
{
	return v / length(v);
};
float3 rotateX(float3 v, float t)
{
	float3x3 mat = float3x3(
	1, 0, 0,
	0, cos(t), -sin(t),
	0, sin(t), cos(t));
	
	return mul(v, mat);
}
float3 rotateY(float3 v, float t)
{
	float3x3 mat = float3x3(
	cos(t),  0, sin(t),
		 0,  1,      0,
	-sin(t), 0, cos(t));
	
	return mul(v, mat);
}
float3 rotateZ(float3 v, float t)
{
	float3x3 mat = float3x3(
	cos(t), -sin(t), 0,
	sin(t), cos(t), 0,
	0, 0, 1);
	
	return mul(v, mat);
}
float3 rotateVector(float3 vec, float3 eulerAngles)
{
	float3 rad = radians(eulerAngles);
	return rotateZ(rotateY(rotateX(vec, rad.x), rad.y), rad.z);
}
float squaredDist(float3 a, float3 b)
{
	return dot(a - b, a - b);
}

struct Material
{
	float3 color;
	float3 emissionColor;
	float emissionIntensity;
};
struct Hit
{
	bool didhit;
	float distance;
	float3 hitPoint;
	float3 normal;
	float3 color;
};
struct Ray
{
	float3 origin;
	float3 direction;
	float3 color;
	float3 incomingLight;
};
struct ObjectBounds
{
	float3 boundsStart;
	float3 boundsEnd;
	
	int indexStart;
	int indexEnd;
};

// triangle struct and intersection algo
struct Triangle
{
	float3 v0;
	float3 v1;
	float3 v2;
	
	float3 color;
};
Hit iTriangle(Ray ray, Triangle tri)
{
	
	float3 v1v0 = tri.v1 - tri.v0;
	float3 v2v0 = tri.v2 - tri.v0;
	float3 rov0 = ray.origin - tri.v0;

	float3 n = cross( v1v0, v2v0 );
	float3 q = cross( rov0, ray.direction );
	float  d = 1.0 / dot( ray.direction, n );
	float  u = d * dot( -q, v2v0 );
	float  v = d * dot( q,  v1v0 );
	float  t = d * dot( -n, rov0 );

	if (u < 0. || v < 0. || (u + v) > 1. || t < .01 || t > 1000) // .01 and 1000 used as near and far temporarily, fixes the rendering behind camera bug
	{
		Hit hit;
		hit.didhit = false;
		hit.distance = -1;
		return hit; // no intersection
	}
	
	Hit hit;
	hit.didhit = true;
	hit.distance = t;
	hit.hitPoint = ray.origin + ray.direction * t;
	hit.color = tri.color;
	hit.normal = normalize(n);
	return hit;
}

//  TODO: make this work, currently returns loop unrolling error crap 
// credit to https://www.shadertoy.com/view/wttyR4 
Hit baldwinRayTriIntersect(Ray ray, Triangle tri)
{
	float3 A = tri.v0;
	float3 B = tri.v1;
	float3 C = tri.v2;
	
	
	float3 E1 = B - A;
	float3 E2 = C - A;
	
	float3 n = cross(E1, E2);
	
	float3 normal = normalize(n);
	
	float3 an = abs(n);
  
	// Vectors for each row of the matrix
	float4 tmat1, tmat2, tmat3;
	float num = -dot(A, n);
	
	// Ideally, the matrix is only computed once and stored in memory
	
	// Compute world-to-baycentric transformation matrix
	
	float3 nn = step(an.yzx, an.xyz) * step(an.zxy, an.xyz);
	int ni = int( dot(nn, float3(0,1,2)) );
	
	uint n1 = (ni + 1) % (uint) 3;
	uint n2 = (ni + 2) % (uint) 3;
	uint n3 = (1 - ni) % (uint) 3;
	uint n4 = (2 - ni) % (uint) 3;
	uint n5 = (3 - ni) % (uint) 3;
	
	tmat1 = float4(E2[n5], E2[n4], E2[n3],  C[n1] * A[n2] - C[n2] * A[n1]) / n[ni];
	tmat2 = float4(E1[n5], E1[n4], E1[n3], -B[n1] * A[n2] + B[n2] * A[n1]) / n[ni];
	tmat3 = float4(n.xyz, num) / n[ni];
	
	tmat1[ni] = 0.;
	tmat2[ni] = 0.;
	
	tmat1[n2] *= -1.;
	tmat2[n1] *= -1.;
		
	float s = dot(float4(ray.origin, 1), tmat3);
	float d = dot(float4(ray.direction, 0), tmat3);
	
	// Distance
	float t = -s / d;
	
	float4 pos = float4(ray.origin + ray.direction * t, 1);
	
	// UV
	float u = dot(pos, tmat1);
	float v = dot(pos, tmat2);
	
	if (u < 0. || v < 0. || (u + v) > 1.)
	{
		Hit hit;
		hit.didhit = false;
		hit.distance = -1;
		return hit; // no intersection
	}

	Hit hit;
	hit.didhit = true;
	hit.distance = t;
	hit.hitPoint = pos.xyz;
	hit.color = tri.color;
	hit.normal = normal;
	return hit;
}

//create a ray given uv and camera parameters
float3 viewParams;
float3 camPos;
float3 camRot;
Ray CameraRay(float2 uv)
{
	float3 pointLocal = float3(uv - .5, 1) * viewParams;
	float3 direction = rotateVector(pointLocal, -camRot);
	
	Ray ray;
	ray.origin = camPos;
	ray.direction = normalize(direction);
	ray.color = 1;
	ray.incomingLight = 0;
	
	return ray;
}

bool RayBoundingBox(Ray ray, float3 boxMin, float3 boxMax)
{
	float3 invDir = 1 / ray.direction;
	float3 tMin = (boxMin - ray.origin) * invDir;
	float3 tMax = (boxMax - ray.origin) * invDir;
	float3 t1 = min(tMin, tMax);
	float3 t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);
	return tNear <= tFar;
};

float3 skyColor(Ray ray)
{
    return lerp(float3(1, 1, 1), float3(.5, .7, 1), smoothstep(0, 1, .5 * (ray.direction.y + 1)));
}

void randomizeSeed()
{
    seed ^= (int) Time * 10000;
}


RWStructuredBuffer<Triangle> World;
RWStructuredBuffer<ObjectBounds> WorldObjectBounds;
int worldSize;
int numObjects;

Hit worldIntersect(Ray ray)
{
    int currentObjectBounds = 0;

    Hit closestHit;
    closestHit.didhit = false;

    closestHit.distance = 10000000;
    for (int i = 0; i < worldSize; i++)
    {
		// optimization: check with bounds and skip object if ray never hits
		
        ObjectBounds currentBounds = WorldObjectBounds[currentObjectBounds];
		
        if (i == currentBounds.indexStart)
        { // only check on first iter
            if (!RayBoundingBox(ray, currentBounds.boundsStart, currentBounds.boundsEnd))
            {
                i = currentBounds.indexEnd; // skip object if no hit
                currentObjectBounds++;
                continue;
            }
        }
        else if (i == currentBounds.indexEnd)
            currentObjectBounds++;
		
		// get tri and intersect with ray
		Triangle tri = World[i];			
		
        Hit hit = iTriangle(ray, tri);
		
        if (hit.distance < closestHit.distance && hit.didhit) // closest hit + actually did hit
            closestHit = hit;
    }
    return closestHit;
};

//RWStructuredBuffer<int> debug;

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	seed = id.x + id.y * res.x;
	
    float3 accum = 0;
    for (int s = 0; s < samples; s++)
    {
        randomizeSeed();
        float2 uv = (id.xy + float2(rand(), rand())) / res.xy;
	
        Ray ray = CameraRay(uv);
		
        int currentBounce = 0;
        while (currentBounce < max_bounces)
        {
            Hit closestHit = worldIntersect(ray);
		
            if (!closestHit.didhit)
            {
                ray.incomingLight = skyColor(ray);
                break;
            }
            ray.color *= closestHit.color;
            ray.origin = closestHit.hitPoint;
            ray.direction = cosWeightedRandomHemisphereDirection(closestHit.normal);
            // ray.direction = reflect(ray.direction, closestHit.normal); // METAL
			
			//debug[0] = closestHit.distance;
			
			
            currentBounce++;
        }
        accum += ray.color * ray.incomingLight;
    }
	
	Output[id.xy] = float4(accum / samples, 1); 
}