// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Image;
RWTexture2D<float4> LastFrame;
int2 resolution;

float3 encodePalYuv(float3 rgb)
{
    rgb = pow(rgb, 2); // gamma correction
    return float3(
        dot(rgb, float3(0.299, 0.587, 0.114)),
        dot(rgb, float3(-0.14713, -0.28886, 0.436)),
        dot(rgb, float3(0.615, -0.51499, -0.10001))
    );
}

float3 decodePalYuv(float3 yuv)
{
    float3 rgb = float3(
        dot(yuv, float3(1., 0., 1.13983)),
        dot(yuv, float3(1., -0.39465, -0.58060)),
        dot(yuv, float3(1., 2.03211, 0.))
    );
    return pow(rgb, 1. / 2.); // gamma correction
}

[numthreads(16, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{  
    float2 uv = id.xy / resolution.xy;
    float4 lastColor = LastFrame[uv];
    
    float3 antialiased = lastColor.xyz;
    float mixRate = min(lastColor.w, 0.5);
    
    float2 off = 1.0 / resolution.xy;
    float3 in0 = Image[uv].xyz;
    
    antialiased = lerp(antialiased * antialiased, in0 * in0, mixRate);
    antialiased = sqrt(antialiased);
    
    float3 in1 = Image[ uv + float2(+off.x, 0.0)    ].xyz;
    float3 in2 = Image[ uv + float2(-off.x, 0.0)    ].xyz;
    float3 in3 = Image[ uv + float2(0.0, +off.y)    ].xyz;
    float3 in4 = Image[ uv + float2(0.0, -off.y)    ].xyz;
    float3 in5 = Image[ uv + float2(+off.x, +off.y) ].xyz;
    float3 in6 = Image[ uv + float2(-off.x, +off.y) ].xyz;
    float3 in7 = Image[ uv + float2(+off.x, -off.y) ].xyz;
    float3 in8 = Image[ uv + float2(-off.x, -off.y) ].xyz;
    
    antialiased = encodePalYuv(antialiased);
    in0 = encodePalYuv(in0);
    in1 = encodePalYuv(in1);
    in2 = encodePalYuv(in2);
    in3 = encodePalYuv(in3);
    in4 = encodePalYuv(in4);
    in5 = encodePalYuv(in5);
    in6 = encodePalYuv(in6);
    in7 = encodePalYuv(in7);
    in8 = encodePalYuv(in8);
    
    float3 minColor = min(min(min(in0, in1), min(in2, in3)), in4);
    float3 maxColor = max(max(max(in0, in1), max(in2, in3)), in4);
    minColor = lerp(minColor,
       min(min(min(in5, in6), min(in7, in8)), minColor), 0.5);
    maxColor = lerp(maxColor,
       max(max(max(in5, in6), max(in7, in8)), maxColor), 0.5);
    
    float3 preclamping = antialiased;
    antialiased = clamp(antialiased, minColor, maxColor);
    
    mixRate = 1.0 / (1.0 / mixRate + 1.0);
    
    float3 diff = antialiased - preclamping;
    float clampAmount = dot(diff, diff);
    
    mixRate += clampAmount * 4.0;
    mixRate = clamp(mixRate, 0.05, 0.5);
    
    antialiased = decodePalYuv(antialiased);
        
    Image[id.xy] = float4(antialiased, mixRate);
}
