// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> Image;
int2 resolution;

float4 tex(float2 uv)
{
	return Image[uv * resolution];
}

float4 smartDeNoise(float2 uv, float sigma, float kSigma, float threshold)
{
	float INV_SQRT_OF_2PI = 0.39894228040143267793994605993439; // 1.0/SQRT_OF_2PI
	float INV_PI = 0.31830988618379067153776752674503;
	
	float radius = round(kSigma * sigma);
	float radQ = radius * radius;
	
	float invSigmaQx2 = .5 / (sigma * sigma); // 1.0 / (sigma^2 * 2.0)
	float invSigmaQx2PI = INV_PI * invSigmaQx2; // 1.0 / (sqrt(PI) * sigma)
	
	float invThresholdSqx2 = .5 / (threshold * threshold); // 1.0 / (sigma^2 * 2.0)
	float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold; // 1.0 / (sqrt(2*PI) * sigma)
	
	float4 centrPx = tex(uv);
	
	float zBuff = 0.;
	float4 aBuff = 0.;
	
	for (float x = -radius; x <= radius; x++)
	{
		float pt = sqrt(radQ - x * x); // pt = yRadius: have circular trend
		for (float y = -pt; y <= pt; y++)
		{
			float2 d = float2(x, y);

			float blurFactor = exp(-dot(d, d) * invSigmaQx2) * invSigmaQx2PI;
			
			float4 walkPx = tex(uv + d / resolution);

			float4 dC = walkPx - centrPx;
			float deltaFactor = exp(-dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;
								 
			zBuff += deltaFactor;
			aBuff += deltaFactor * walkPx;
		}
	}
	return aBuff / zBuff;
}

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Image[id.xy] = smartDeNoise(float2(id.xy) / resolution.xy, 5, 2, .1);
}